{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-289f65ac88d34c9a3d1adff2d82ba7a3c50f827a",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Vault.sol": "project/contracts/Vault.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/Vault.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { YieldEngine } from \"./YieldEngine.sol\";\nimport { YUSDe } from \"./YUSDe.sol\";\n\n/**\n * @title Vault\n * @dev Main vault contract that manages USDe deposits and yUSDe minting\n * Handles the bridge between user deposits and yield generation\n */\ncontract Vault is Ownable, ReentrancyGuard {\n    IERC20 public immutable usde;\n    YieldEngine public immutable yieldEngine;\n    YUSDe public immutable yusde;\n    \n    // Vault state\n    mapping(address => uint256) public userDeposits;\n    uint256 public totalDeposits;\n    \n    // Events\n    event Deposited(address indexed user, uint256 usdeAmount, uint256 susdeAmount);\n    event Withdrawn(address indexed user, uint256 susdeAmount, uint256 usdeAmount);\n    event YUSDeMinted(address indexed user, uint256 susdeAmount, uint256 yusdeAmount);\n    event YUSDeRedeemed(address indexed user, uint256 yusdeAmount, uint256 susdeAmount);\n    \n    constructor(\n        address _usde,\n        address _yieldEngine,\n        address _yusde\n    ) Ownable(msg.sender) {\n        usde = IERC20(_usde);\n        yieldEngine = YieldEngine(_yieldEngine);\n        yusde = YUSDe(_yusde);\n    }\n    \n    /**\n     * @dev Deposit USDe and stake it in the yield engine\n     * @param amount Amount of USDe to deposit\n     */\n    function deposit(uint256 amount) external nonReentrant {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(usde.balanceOf(msg.sender) >= amount, \"Insufficient USDe balance\");\n        \n        // Transfer USDe from user to this contract\n        usde.transferFrom(msg.sender, address(this), amount);\n        \n        // Approve and stake in yield engine\n        usde.approve(address(yieldEngine), amount);\n        yieldEngine.stake(amount);\n        \n        // Update user deposits\n        userDeposits[msg.sender] += amount;\n        totalDeposits += amount;\n        \n        emit Deposited(msg.sender, amount, amount);\n    }\n    \n    /**\n     * @dev Withdraw USDe from the vault\n     * @param amount Amount of sUSDe to withdraw\n     */\n    function withdraw(uint256 amount) external nonReentrant {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(userDeposits[msg.sender] >= amount, \"Insufficient deposit balance\");\n        \n        // Unstake from yield engine\n        yieldEngine.unstake(amount);\n        \n        // Update user deposits\n        userDeposits[msg.sender] -= amount;\n        totalDeposits -= amount;\n        \n        // Transfer USDe + yield to user\n        uint256 totalUsde = usde.balanceOf(address(this));\n        usde.transfer(msg.sender, totalUsde);\n        \n        emit Withdrawn(msg.sender, amount, totalUsde);\n    }\n    \n    /**\n     * @dev Mint yUSDe tokens using sUSDe as collateral\n     * @param susdeAmount Amount of sUSDe to use as collateral\n     * @return yusdeAmount Amount of yUSDe minted\n     */\n    function mintYUSDe(uint256 susdeAmount) external nonReentrant returns (uint256) {\n        require(susdeAmount > 0, \"Amount must be greater than 0\");\n        require(yieldEngine.balanceOf(msg.sender) >= susdeAmount, \"Insufficient sUSDe balance\");\n        \n        // Transfer sUSDe from user to yUSDe contract\n        yieldEngine.transferFrom(msg.sender, address(yusde), susdeAmount);\n        \n        // Mint yUSDe tokens\n        uint256 yusdeAmount = yusde.mint(susdeAmount);\n        \n        emit YUSDeMinted(msg.sender, susdeAmount, yusdeAmount);\n        return yusdeAmount;\n    }\n    \n    /**\n     * @dev Redeem yUSDe tokens to receive sUSDe\n     * @param yusdeAmount Amount of yUSDe to redeem\n     * @return susdeAmount Amount of sUSDe received\n     */\n    function redeemYUSDe(uint256 yusdeAmount) external nonReentrant returns (uint256) {\n        require(yusdeAmount > 0, \"Amount must be greater than 0\");\n        require(yusde.balanceOf(msg.sender) >= yusdeAmount, \"Insufficient yUSDe balance\");\n        \n        // Burn yUSDe and receive sUSDe\n        uint256 susdeAmount = yusde.burn(yusdeAmount);\n        \n        // Transfer sUSDe back to user\n        yieldEngine.transfer(msg.sender, susdeAmount);\n        \n        emit YUSDeRedeemed(msg.sender, yusdeAmount, susdeAmount);\n        return susdeAmount;\n    }\n    \n    /**\n     * @dev Get user's total deposit balance\n     * @param user User address\n     * @return balance Total deposit balance\n     */\n    function getUserBalance(address user) external view returns (uint256) {\n        return userDeposits[user];\n    }\n    \n    /**\n     * @dev Get user's sUSDe balance from yield engine\n     * @param user User address\n     * @return balance sUSDe balance\n     */\n    function getUserSUSDeBalance(address user) external view returns (uint256) {\n        return yieldEngine.balanceOf(user);\n    }\n    \n    /**\n     * @dev Get user's yUSDe balance\n     * @param user User address\n     * @return balance yUSDe balance\n     */\n    function getUserYUSDeBalance(address user) external view returns (uint256) {\n        return yusde.balanceOf(user);\n    }\n    \n    /**\n     * @dev Get user's yield from staking\n     * @param user User address\n     * @return yield Current yield amount\n     */\n    function getUserYield(address user) external view returns (uint256) {\n        return yieldEngine.getUserYield(user);\n    }\n    \n    /**\n     * @dev Claim yield from staking\n     */\n    function claimYield() external nonReentrant {\n        yieldEngine.claimYield();\n    }\n    \n    /**\n     * @dev Get total vault information\n     * @return totalDeposits_ Total USDe deposited\n     * @return totalStaked Total sUSDe staked\n     * @return totalYUSDe Total yUSDe minted\n     */\n    function getVaultInfo() external view returns (\n        uint256 totalDeposits_,\n        uint256 totalStaked,\n        uint256 totalYUSDe\n    ) {\n        totalDeposits_ = totalDeposits;\n        totalStaked = yieldEngine.getTotalStaked();\n        totalYUSDe = yusde.totalSupply();\n    }\n    \n    /**\n     * @dev Emergency function to withdraw USDe (only owner)\n     * @param amount Amount to withdraw\n     */\n    function emergencyWithdraw(uint256 amount) external onlyOwner {\n        require(usde.balanceOf(address(this)) >= amount, \"Insufficient balance\");\n        usde.transfer(owner(), amount);\n    }\n}\n"
      },
      "project/contracts/YieldEngine.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title YieldEngine\n * @dev Manages USDe staking and sUSDe rewards\n * This contract handles the core yield generation mechanism\n */\ncontract YieldEngine is ERC20, Ownable, ReentrancyGuard {\n    IERC20 public immutable usde;\n    \n    // Yield parameters\n    uint256 public constant YIELD_RATE = 500; // 5% APY\n    uint256 public constant FULL_RATE = 10000; // 100%\n    uint256 public constant SECONDS_PER_YEAR = 365 days;\n    \n    // Staking data\n    mapping(address => uint256) public userStakedAmount;\n    mapping(address => uint256) public userStakedTime;\n    uint256 public totalStaked;\n    \n    // Events\n    event Staked(address indexed user, uint256 amount, uint256 timestamp);\n    event Unstaked(address indexed user, uint256 amount, uint256 yield);\n    event YieldClaimed(address indexed user, uint256 yield);\n    \n    constructor(address _usde) ERC20(\"Staked USDe\", \"sUSDe\") Ownable(msg.sender) {\n        usde = IERC20(_usde);\n    }\n    \n    /**\n     * @dev Stake USDe tokens to receive sUSDe\n     * @param amount Amount of USDe to stake\n     */\n    function stake(uint256 amount) external nonReentrant {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(usde.balanceOf(msg.sender) >= amount, \"Insufficient USDe balance\");\n        \n        // Transfer USDe from user to this contract\n        usde.transferFrom(msg.sender, address(this), amount);\n        \n        // Calculate yield for existing stake\n        if (userStakedAmount[msg.sender] > 0) {\n            _claimYield(msg.sender);\n        }\n        \n        // Update staking data\n        userStakedAmount[msg.sender] += amount;\n        userStakedTime[msg.sender] = block.timestamp;\n        totalStaked += amount;\n        \n        // Mint sUSDe tokens (1:1 ratio initially)\n        _mint(msg.sender, amount);\n        \n        emit Staked(msg.sender, amount, block.timestamp);\n    }\n    \n    /**\n     * @dev Unstake sUSDe tokens to receive USDe + yield\n     * @param amount Amount of sUSDe to unstake\n     */\n    function unstake(uint256 amount) external nonReentrant {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(balanceOf(msg.sender) >= amount, \"Insufficient sUSDe balance\");\n        \n        // Calculate yield\n        uint256 yield = calculateYield(msg.sender, amount);\n        uint256 totalUsde = amount + yield;\n        \n        // Burn sUSDe tokens\n        _burn(msg.sender, amount);\n        \n        // Update staking data\n        userStakedAmount[msg.sender] -= amount;\n        totalStaked -= amount;\n        \n        // Transfer USDe + yield to user\n        require(usde.balanceOf(address(this)) >= totalUsde, \"Insufficient USDe in contract\");\n        usde.transfer(msg.sender, totalUsde);\n        \n        emit Unstaked(msg.sender, amount, yield);\n    }\n    \n    /**\n     * @dev Calculate yield for a user's stake\n     * @param user User address\n     * @param amount Amount to calculate yield for\n     * @return yield Yield amount\n     */\n    function calculateYield(address user, uint256 amount) public view returns (uint256) {\n        if (userStakedTime[user] == 0) return 0;\n        \n        uint256 timeElapsed = block.timestamp - userStakedTime[user];\n        uint256 yield = (amount * YIELD_RATE * timeElapsed) / (FULL_RATE * SECONDS_PER_YEAR);\n        \n        return yield;\n    }\n    \n    /**\n     * @dev Claim yield without unstaking\n     */\n    function claimYield() external nonReentrant {\n        require(userStakedAmount[msg.sender] > 0, \"No staked amount\");\n        \n        uint256 yield = calculateYield(msg.sender, userStakedAmount[msg.sender]);\n        require(yield > 0, \"No yield to claim\");\n        \n        // Update staking time to reset yield calculation\n        userStakedTime[msg.sender] = block.timestamp;\n        \n        // Transfer yield to user\n        require(usde.balanceOf(address(this)) >= yield, \"Insufficient USDe for yield\");\n        usde.transfer(msg.sender, yield);\n        \n        emit YieldClaimed(msg.sender, yield);\n    }\n    \n    /**\n     * @dev Internal function to claim yield for a user\n     * @param user User address\n     */\n    function _claimYield(address user) internal {\n        if (userStakedTime[user] == 0) return;\n        \n        uint256 yield = calculateYield(user, userStakedAmount[user]);\n        if (yield > 0) {\n            userStakedTime[user] = block.timestamp;\n            usde.transfer(user, yield);\n            emit YieldClaimed(user, yield);\n        }\n    }\n    \n    /**\n     * @dev Get user's total yield\n     * @param user User address\n     * @return yield Total yield amount\n     */\n    function getUserYield(address user) external view returns (uint256) {\n        return calculateYield(user, userStakedAmount[user]);\n    }\n    \n    /**\n     * @dev Get user's staking info\n     * @param user User address\n     * @return stakedAmount Amount staked\n     * @return stakedTime Time of last stake\n     * @return yield Current yield\n     */\n    function getUserStakingInfo(address user) external view returns (\n        uint256 stakedAmount,\n        uint256 stakedTime,\n        uint256 yield\n    ) {\n        stakedAmount = userStakedAmount[user];\n        stakedTime = userStakedTime[user];\n        yield = calculateYield(user, stakedAmount);\n    }\n    \n    /**\n     * @dev Get total staked amount\n     * @return totalStakedAmount Total staked amount\n     */\n    function getTotalStaked() external view returns (uint256) {\n        return totalStaked;\n    }\n}\n"
      },
      "project/contracts/YUSDe.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title YUSDe\n * @dev Margin token backed by sUSDe at 0.8:1 ratio\n * This token represents margin collateral for perpetual trading\n */\ncontract YUSDe is ERC20, Ownable {\n    IERC20 public immutable susde;\n    address public vault;\n    \n    // Collateral ratio: 0.8 yUSDe per 1 sUSDe\n    uint256 public constant COLLATERAL_RATIO = 8000; // 80% in basis points\n    uint256 public constant FULL_RATIO = 10000; // 100% in basis points\n    \n    // Events\n    event Minted(address indexed user, uint256 susdeAmount, uint256 yusdeAmount);\n    event Burned(address indexed user, uint256 yusdeAmount, uint256 susdeAmount);\n    \n    constructor(address _susde) ERC20(\"Yield USDe\", \"yUSDe\") Ownable(msg.sender) {\n        susde = IERC20(_susde);\n    }\n    \n    /**\n     * @dev Set the vault address (only owner)\n     * @param _vault Vault contract address\n     */\n    function setVault(address _vault) external onlyOwner {\n        vault = _vault;\n    }\n    \n    /**\n     * @dev Mint yUSDe tokens backed by sUSDe\n     * @param susdeAmount Amount of sUSDe to use as collateral\n     * @return yusdeAmount Amount of yUSDe minted\n     */\n    function mint(uint256 susdeAmount) external returns (uint256) {\n        require(vault != address(0), \"Vault not set\");\n        require(susdeAmount > 0, \"Amount must be greater than 0\");\n        require(susde.balanceOf(msg.sender) >= susdeAmount, \"Insufficient sUSDe balance\");\n        \n        // Calculate yUSDe amount (0.8:1 ratio)\n        uint256 yusdeAmount = (susdeAmount * COLLATERAL_RATIO) / FULL_RATIO;\n        \n        // Transfer sUSDe from user to this contract\n        susde.transferFrom(msg.sender, address(this), susdeAmount);\n        \n        // Mint yUSDe tokens\n        _mint(msg.sender, yusdeAmount);\n        \n        emit Minted(msg.sender, susdeAmount, yusdeAmount);\n        return yusdeAmount;\n    }\n    \n    /**\n     * @dev Burn yUSDe tokens to receive sUSDe\n     * @param yusdeAmount Amount of yUSDe to burn\n     * @return susdeAmount Amount of sUSDe returned\n     */\n    function burn(uint256 yusdeAmount) external returns (uint256) {\n        require(yusdeAmount > 0, \"Amount must be greater than 0\");\n        require(balanceOf(msg.sender) >= yusdeAmount, \"Insufficient yUSDe balance\");\n        \n        // Calculate sUSDe amount (1:0.8 ratio)\n        uint256 susdeAmount = (yusdeAmount * FULL_RATIO) / COLLATERAL_RATIO;\n        require(susde.balanceOf(address(this)) >= susdeAmount, \"Insufficient sUSDe in contract\");\n        \n        // Burn yUSDe tokens\n        _burn(msg.sender, yusdeAmount);\n        \n        // Transfer sUSDe back to user\n        susde.transfer(msg.sender, susdeAmount);\n        \n        emit Burned(msg.sender, yusdeAmount, susdeAmount);\n        return susdeAmount;\n    }\n    \n    /**\n     * @dev Get the collateral ratio for a given amount\n     * @param susdeAmount Amount of sUSDe\n     * @return yusdeAmount Equivalent yUSDe amount\n     */\n    function getCollateralAmount(uint256 susdeAmount) external pure returns (uint256) {\n        return (susdeAmount * COLLATERAL_RATIO) / FULL_RATIO;\n    }\n    \n    /**\n     * @dev Get the backing amount for yUSDe\n     * @param yusdeAmount Amount of yUSDe\n     * @return susdeAmount Equivalent sUSDe amount\n     */\n    function getBackingAmount(uint256 yusdeAmount) external pure returns (uint256) {\n        return (yusdeAmount * FULL_RATIO) / COLLATERAL_RATIO;\n    }\n    \n    /**\n     * @dev Get total sUSDe backing\n     * @return totalBacking Total sUSDe held as collateral\n     */\n    function getTotalBacking() external view returns (uint256) {\n        return susde.balanceOf(address(this));\n    }\n    \n    /**\n     * @dev Emergency function to withdraw sUSDe (only owner)\n     * @param amount Amount to withdraw\n     */\n    function emergencyWithdraw(uint256 amount) external onlyOwner {\n        require(susde.balanceOf(address(this)) >= amount, \"Insufficient balance\");\n        susde.transfer(owner(), amount);\n    }\n}\n"
      }
    }
  }
}